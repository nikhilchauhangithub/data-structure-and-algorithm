import java.util.Arrays;

public class mergesortRecursion {
    public static void main(String[] args) {
        int[] arr={5,1,4,9,2};
        arr=mergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }

    static int[] mergeSort(int[] arr){
        if (arr.length==1){
            return arr;
        }

        int mid=arr.length/2;

        int[] left= mergeSort(Arrays.copyOfRange(arr,0,mid));
        int[] right=mergeSort(Arrays.copyOfRange(arr,mid,arr.length));

        return merge(left,right);

    }

    static int[] merge(int[] first,int[] second){
int[] mix=new int[first.length+second.length];

//pointers for all array both left and right and then for new array mix

        int i=0; //pointrer for left
        int j=0;  // for right
        int k=0;  //for for mix

        while (i< first.length && j< second.length){

            if (first[i]<second[j]){
                mix[k]=first[i];
                i++;
            }
            else {
                mix[k]=second[j];
                j++;
            }
            k++;

        }

//and it maybe possible that one of the array is fill and array of remaining elements are left then we  will simply put them in mix array
        //while j is smaller than second.lenth i wala while will execute
while (i< first.length){
    mix[k]=first[i];
    i++;
    k++;
}
while (j< second.length){
    mix[k]=second[j];
    j++;
    k++;
}
return mix;
    }

}
